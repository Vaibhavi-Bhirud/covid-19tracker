{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1E-drive\\\\LANGUAGES\\\\JS\\\\Covide__19\\\\covid-19-tracker\\\\src\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legends: {\n    display: false\n  },\n  elements: {\n    point: {\n      radios: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"indexe\",\n    intersect: false,\n    callback: {\n      lable: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scals: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        formate: \"mm/dd/yy\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a doller sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n}; // https://disease.sh/v3/covid-19/Historical/all?Lastsays=120\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph({\n  casesType = \"cases\"\n}) {\n  _s();\n\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => {\n        return response.json();\n      }).then(data => {\n        let chartData = buildChartData(data, \"cases\");\n        setData(chartData); //   build (chartData);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"I am a graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204,16,52,0.5)\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph; //  last viwe on 2.58.22\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["D:/1E-drive/LANGUAGES/JS/Covide__19/covid-19-tracker/src/LineGraph.js"],"names":["React","useEffect","useState","Line","numeral","options","legends","display","elements","point","radios","maintainAspectRatio","tooltips","mode","intersect","callback","lable","tooltipItem","data","value","format","scals","xAxes","type","time","formate","tooltipFormat","yAxes","gridLines","ticks","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setData","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GADK;AAIdC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AADH;AADC,GAJI;AASdC,EAAAA,mBAAmB,EAAE,KATP;AAUdC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,QADE;AAERC,IAAAA,SAAS,EAAE,KAFH;AAGRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE,UAAUC,WAAV,EAAuBC,IAAvB,EAA6B;AAClC,eAAOd,OAAO,CAACa,WAAW,CAACE,KAAb,CAAP,CAA2BC,MAA3B,CAAkC,MAAlC,CAAP;AACD;AAHO;AAHF,GAVI;AAmBdC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE,UADL;AAEJC,QAAAA,aAAa,EAAE;AAFX;AAFR,KADK,CADF;AAULC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,SAAS,EAAE;AACTrB,QAAAA,OAAO,EAAE;AADA,OADb;AAIEsB,MAAAA,KAAK,EAAE;AACL;AACAd,QAAAA,QAAQ,EAAE,UAAUI,KAAV,EAAiBW,KAAjB,EAAwBC,MAAxB,EAAgC;AACxC,iBAAO3B,OAAO,CAACe,KAAD,CAAP,CAAeC,MAAf,CAAsB,IAAtB,CAAP;AACD;AAJI;AAJT,KADK;AAVF;AAnBO,CAAhB,C,CA4CA;;AAEA,MAAMY,cAAc,GAAG,CAACd,IAAD,EAAOe,SAAS,GAAG,OAAnB,KAA+B;AACpD,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,aAAJ;;AACA,OAAK,IAAIC,IAAT,IAAiBlB,IAAI,CAACmB,KAAtB,EAA6B;AAC3B,QAAIF,aAAJ,EAAmB;AACjB,UAAIG,YAAY,GAAG;AACjBC,QAAAA,CAAC,EAAEH,IADc;AAEjBI,QAAAA,CAAC,EAAEtB,IAAI,CAACe,SAAD,CAAJ,CAAgBG,IAAhB,IAAwBD;AAFV,OAAnB;AAIAD,MAAAA,SAAS,CAACO,IAAV,CAAeH,YAAf;AACD;;AACDH,IAAAA,aAAa,GAAGjB,IAAI,CAACe,SAAD,CAAJ,CAAgBG,IAAhB,CAAhB;AACD;;AACD,SAAOF,SAAP;AACD,CAdD;;AAgBA,SAASQ,SAAT,CAAmB;AAAET,EAAAA,SAAS,GAAG;AAAd,CAAnB,EAA4C;AAAA;;AAC1C,QAAM,CAACf,IAAD,EAAOyB,OAAP,IAAkBzC,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2C,SAAS,GAAG,YAAY;AAC5B,YAAMC,KAAK,CAAC,4DAAD,CAAL,CACHC,IADG,CACGC,QAAD,IAAc;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHG,EAIHF,IAJG,CAIG5B,IAAD,IAAU;AACd,YAAIgB,SAAS,GAAGF,cAAc,CAACd,IAAD,EAAO,OAAP,CAA9B;AACAyB,QAAAA,OAAO,CAACT,SAAD,CAAP,CAFc,CAGd;AACD,OARG,CAAN;AASD,KAVD;;AAWAU,IAAAA,SAAS;AACV,GAbQ,EAaN,EAbM,CAAT;AAeA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAAA1B,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE+B,MAAN,IAAe,CAAf,iBACC,QAAC,IAAD;AACE,MAAA,OAAO,EAAE5C,OADX;AAEE,MAAA,IAAI,EAAE;AACJ6C,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,eAAe,EAAE,qBADnB;AAEEC,UAAAA,WAAW,EAAE,SAFf;AAGElC,UAAAA,IAAI,EAAEA;AAHR,SADQ;AADN;AAFR;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GArCQwB,S;;KAAAA,S;AAuCT,eAAeA,SAAf,C,CACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nconst options = {\r\n  legends: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radios: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"indexe\",\r\n    intersect: false,\r\n    callback: {\r\n      lable: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scals: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          formate: \"mm/dd/yy\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a doller sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n// https://disease.sh/v3/covid-19/Historical/all?Lastsays=120\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, \"cases\");\r\n          setData(chartData);\r\n          //   build (chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [  ]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>I am a graph</h1>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n//  last viwe on 2.58.22\r\n"]},"metadata":{},"sourceType":"module"}